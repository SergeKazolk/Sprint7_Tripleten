import streamlit as st
import pandas as pd
from PIL import Image

# ConfiguraciÃ³n de pÃ¡gina
st.set_page_config(layout="wide")

# Carga de datos con cachÃ© para evitar recarga innecesaria


@st.cache_data
def cargar_datos():
    return pd.read_csv('vehicles_us_limpio.csv')


df = cargar_datos()

# Inicializar estado de filtros si no existen aÃºn
filtros = ['condicion', 'marca', 'modelo',
           'aÃ±o', 'tipo', 'cilindrada', 'transmision']
for key in filtros:
    if key not in st.session_state:
        st.session_state[key] = []

if "rango_precio" not in st.session_state:
    st.session_state["rango_precio"] = (
        int(df["Precio"].min()), int(df["Precio"].max()))


# BotÃ³n para limpiar filtros
if st.sidebar.button("ðŸ§¹ Limpiar filtros"):
    for key in filtros:
        st.session_state[key] = []
    st.session_state["rango_precio"] = (
        int(df["Precio"].min()), int(df["Precio"].max()))


# Copia para filtrar progresivamente
filtro_actual = df.copy()

# Texto centrado con markdown y HTML
st.markdown("""
    <h3 style='text-align: center;'>Â¡Comienza a elegir! Â¡Prueba los filtros!</h3>
    <h4 style='text-align: center;'>El AUTO DE TUS SUEÃ‘OS estÃ¡ a unos clicks de distancia</h4>
""", unsafe_allow_html=True)

# Imagen centrada con columnas
col1, col2, col3 = st.columns([1, 2, 1])
with col2:
    st.image("img/auto_interrogacion.png", width=400)

# --- SIDEBAR ---
st.sidebar.header("Filtros")

# --- Filtro CondiciÃ³n ---
condicion_opciones = sorted(filtro_actual['CondiciÃ³n'].dropna().unique())
condicion = st.sidebar.multiselect(
    "CondiciÃ³n", condicion_opciones, key='condicion')
if condicion:
    filtro_actual = filtro_actual[filtro_actual['CondiciÃ³n'].isin(condicion)]

# --- Filtro Marca ---
marca_opciones = sorted(filtro_actual['Marca'].dropna().unique())
marca = st.sidebar.multiselect("Marca", marca_opciones, key='marca')
if marca:
    filtro_actual = filtro_actual[filtro_actual['Marca'].isin(marca)]

# --- Filtro Modelo ---
modelo_opciones = sorted(filtro_actual['Modelo'].dropna().unique())
modelo = st.sidebar.multiselect("Modelo", modelo_opciones, key='modelo')
if modelo:
    filtro_actual = filtro_actual[filtro_actual['Modelo'].isin(modelo)]

# --- Filtro AÃ±o del modelo ---
aÃ±o_opciones = sorted(filtro_actual['AÃ±o del modelo'].dropna().unique())
aÃ±o = st.sidebar.multiselect("AÃ±o del modelo", aÃ±o_opciones, key='aÃ±o')
if aÃ±o:
    filtro_actual = filtro_actual[filtro_actual['AÃ±o del modelo'].isin(aÃ±o)]

# --- Filtro Tipo ---
tipo_opciones = sorted(filtro_actual['Tipo'].dropna().unique())
tipo = st.sidebar.multiselect("Tipo", tipo_opciones, key='tipo')
if tipo:
    filtro_actual = filtro_actual[filtro_actual['Tipo'].isin(tipo)]

# --- Filtro Cilindrada ---
cilindrada_opciones = sorted(filtro_actual['Cilindrada'].dropna().unique())
cilindrada = st.sidebar.multiselect(
    "Cilindrada", cilindrada_opciones, key='cilindrada')
if cilindrada:
    filtro_actual = filtro_actual[filtro_actual['Cilindrada'].isin(cilindrada)]

# --- Filtro TransmisiÃ³n ---
transmision_opciones = sorted(filtro_actual['TransmisiÃ³n'].dropna().unique())
transmision = st.sidebar.multiselect(
    "TransmisiÃ³n", transmision_opciones, key='transmision')
if transmision:
    filtro_actual = filtro_actual[filtro_actual['TransmisiÃ³n'].isin(
        transmision)]

# --- Filtro Precio ---
min_precio = int(df['Precio'].min())
max_precio = int(df['Precio'].max())

# Slider sin modificar session_state directamente
rango_precio = st.sidebar.slider(
    "Rango de precio",
    min_value=min_precio,
    max_value=max_precio,
    value=(min_precio, max_precio),
    key="rango_precio"
)

# Aplicar filtro
filtro_actual = filtro_actual[
    (filtro_actual["Precio"] >= rango_precio[0]) &
    (filtro_actual["Precio"] <= rango_precio[1])
]


# --- Control de nÃºmero de resultados mostrados ---
max_resultados = st.sidebar.slider(
    "MÃ¡ximo de resultados a mostrar", 5, 100, 50)
df_vista = filtro_actual.head(max_resultados)

# --- Mostrar resultados filtrados ---
filtros_aplicados = any([
    condicion, marca, modelo, aÃ±o, tipo, cilindrada, transmision,
    rango_precio != (min_precio, max_precio)
])

if filtros_aplicados:
    st.subheader("Resultados de la bÃºsqueda")

    if filtro_actual.empty:
        st.warning("No se encontraron resultados con los filtros seleccionados.")
    else:
        # Mostrar estrellas doradas para condiciÃ³n
        def estrellas_html(cond):
            estrellas = len(cond.strip("*"))
            return f"<span style='color:gold'>{'â˜…'*estrellas}</span>"

        if len(df_vista) <= 50:
            df_vista['CondiciÃ³n'] = df_vista['CondiciÃ³n'].apply(estrellas_html)
            st.markdown(
                df_vista.to_html(escape=False, index=False),
                unsafe_allow_html=True
            )
        else:
            st.dataframe(df_vista)

# --- CatÃ¡logo completo (comentado por ahora) ---
# st.subheader("CatÃ¡logo completo")
# st.dataframe(df)
